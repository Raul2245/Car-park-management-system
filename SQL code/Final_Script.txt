CREATE DATABASE IF NOT EXISTS car_park;
USE car_park;

SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS vehicle;
DROP TABLE IF EXISTS driver;
DROP TABLE IF EXISTS route;
DROP TABLE IF EXISTS brand;
DROP TABLE IF EXISTS vehicle_status;
DROP TABLE IF EXISTS location;
DROP TABLE IF EXISTS lot;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS event_;
DROP TABLE IF EXISTS lot_event;

CREATE TABLE accounts(
	id INT AUTO_INCREMENT PRIMARY KEY,
	nname VARCHAR(30) NOT NULL,
    surname VARCHAR(30) NOT NULL,
    email VARCHAR(100) NOT NULL,
    username VARCHAR(15) NOT NULL,
    pass VARCHAR(20));

CREATE TABLE vehicle(
	id INT AUTO_INCREMENT PRIMARY KEY,
    nb CHAR(7) NOT NULL,
    brandid INT NOT NULL,
    km INT NOT NULL,
    statusid INT NOT NULL,
    lotid INT NOT NULL,
    driverid INT,
    fuel_date DATE,
    fuel INT,
    out_year YEAR NOT NULL,
    FOREIGN KEY (brandid) REFERENCES brand(id),
    FOREIGN KEY (statusid) REFERENCES vehicle_status(id),
    FOREIGN KEY (driverid) REFERENCES driver(id),
    FOREIGN KEY (lotid) REFERENCES lot(id));
    
CREATE TABLE driver(
	id INT AUTO_INCREMENT PRIMARY KEY,
    nname VARCHAR(30) NOT NULL,
    surname VARCHAR(30) NOT NULL,
    age INT NOT NULL,
    salary INT NOT NULL,
    adress VARCHAR(100) NOT NULL,
    routeid INT,
    FOREIGN KEY (routeid) REFERENCES route(id));
    
CREATE TABLE route(
	id INT AUTO_INCREMENT PRIMARY KEY,
    departure VARCHAR(30) NOT NULL,
    arrival VARCHAR(30) NOT NULL,
    distance INT NOT NULL);
    
CREATE TABLE brand(
	id INT AUTO_INCREMENT PRIMARY KEY,
	nname VARCHAR(20) NOT NULL,
    fuel_capacity INT NOT NULL);
    
CREATE TABLE vehicle_status(
	id INT AUTO_INCREMENT PRIMARY KEY,
    ttype VARCHAR(20) NOT NULL,
    details VARCHAR(50) NOT NULL);

CREATE TABLE location(
	id INT AUTO_INCREMENT PRIMARY KEY,
    city VARCHAR(20) NOT NULL,
    street VARCHAR(20) NOT NULL,
    nb INT NOT NULL);
    
CREATE TABLE lot(
	id INT AUTO_INCREMENT PRIMARY KEY,
    size INT NOT NULL,
    locationid INT,
    current_size INT DEFAULT 0,
    FOREIGN KEY (locationid) REFERENCES location(id));
    
CREATE TABLE employee(
	id INT AUTO_INCREMENT PRIMARY KEY,
    nname VARCHAR(30) NOT NULL,
    surname VARCHAR(30) NOT NULL,
    age INT NOT NULL,
    salary INT NOT NULL,
    adress VARCHAR(100) NOT NULL,
    emp_role VARCHAR(20) NOT NULL,
    emp_date DATE NOT NULL,
    lotid INT,
    FOREIGN KEY (lotid) REFERENCES lot(id));
    
CREATE TABLE event_(
	id INT AUTO_INCREMENT PRIMARY KEY,
    details VARCHAR(100) NOT NULL);
    
CREATE TABLE lot_event(
	id INT AUTO_INCREMENT PRIMARY KEY,
	lotid INT,
    eventid INT,
    emp_id INT, 
    ev_date DATE,
    FOREIGN KEY (lotid) REFERENCES lot(id),
    FOREIGN KEY (eventid) REFERENCES event_(id),
    FOREIGN KEY (emp_id) REFERENCES employee(id));
    
CREATE TABLE alimentare(
	id INT AUTO_INCREMENT PRIMARY KEY,
	nr CHAR(7),
    fuel INT,
    fueling_date DATE,
    km INT,
    driverid INT,
    FOREIGN KEY (driverid) REFERENCES driver(id));
  
DROP TRIGGER IF EXISTS alimentare_ins;
DELIMITER //
CREATE TRIGGER alimentare_ins AFTER INSERT ON vehicle 
FOR EACH ROW
BEGIN 
	INSERT INTO alimentare(nr, fuel, fueling_date, km, driverid) VALUES(NEW.nb, NEW.fuel, NEW.fuel_date, NEW.km, NEW.driverid);
 END//
 DELIMITER ;
 
 DROP TRIGGER IF EXISTS add_vehicul;
 DELIMITER //
 CREATE TRIGGER add_vehicul AFTER INSERT ON vehicle
 FOR EACH ROW
 BEGIN
	INSERT INTO lot_event(lotid, eventid, emp_id, ev_date) VALUES (NEW.lotid, 7, (SELECT id FROM employee e WHERE NEW.lotid = e.lotid LIMIT 1), CURRENT_DATE());
    IF ((SELECT current_size + 1 FROM lot WHERE id = NEW.lotid) <= (SELECT size FROM lot WHERE id = NEW.lotid)) THEN
		UPDATE lot SET current_size = current_size + 1 WHERE id = NEW.lotid;
	ELSE
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Lotul a ajuns la dimenisiunea maxima';
	END IF;
END//
DELIMITER ;

INSERT INTO brand(nname, fuel_capacity) VALUES ('Lamboghini', 80);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Audi', 60);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Dacia', 50);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Ferrari', 30);
INSERT INTO brand(nname, fuel_capacity) VALUES ('BMW', 70);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Volkswagen', 100);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Ford', 50);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Renault', 80);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Citroen', 70);
INSERT INTO brand(nname, fuel_capacity) VALUES ('Toyota', 60);

INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Butusina', 'Florin', 52, 1900, 'Str. Gheorghe Palade, Nr. 22', 2);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Mecheres', 'Daniela', 43, 2300, 'Radu Voda nr. 1.Piata Unirii', 1);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Craciun', 'Claudia', 34, 2500, 'Drumul Valea Cricovului, nr. 85, Sector 6', 7);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Man', 'Ioan', 22, 2200, 'Strada Targu Neamt 30 Sectorul 6', 4);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Iosif', 'Ovidiu', 36, 2300, 'Calea Dorobanti 105 Sectorul 1', 10);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Sabo', 'Sergiu', 41, 1900, 'Soseaua Mihai Bravu 174 Bl. 229, Sc.A, Ap.1', 9);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Toma', 'Marcu', 57, 2000, 'Str. Nasaud, Nr. 26', 8);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Rutas', 'Ionut', 29, 2100, 'Strada Stirbei Voda nr. 50', 3);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Bosca', 'Diana', 42, 2600, 'Str.Popa Savu Nr.77', 5);
INSERT INTO driver(nname, surname, age, salary, adress, routeid) VALUES ('Lupou', 'Georgiana', 37, 2500, 'Str. Gabroveni nr.9', 6);

INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Domuta', 'Gabriela', 48, 1900, 'Str. Toma Caragiu nr. 3', 'Paznic', '2005-06-03', 1);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Ardelean', 'Olimpiu', 30, 2100, 'Str. Matei Basarab Nr.106', 'Ingrijitor', '2004-03-29', 2);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Haiduc', 'Sorina', 24, 2300, 'Str. Istriei nr. 20', 'Contabil', '2012-01-17', 2);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Purcar', 'Mihai', 45, 1800, 'P-ta. Kogalniceanu Nr. 8 ', 'Paznic', '2015-08-23', 3);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Hurban', 'Bogdan', 29, 2400, 'Str. Silvestru nr.33', 'Ingrijitor', '2001-05-05', 5);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Bosca', 'Gabriela', 53, 1900, 'Str. Gheorghe Bratianu, nr.44', 'Contabil', '2019-07-12', 4);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Retian', 'Denisa', 54, 2600, 'Str. Sura Mare, nr. 1', 'Ingrijitor', '2020-09-22', 6);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Bulzan', 'Alexandru', 21, 2700, 'Str. Stirbei Voda nr.44', 'Responsabil stoc', '2017-02-27', 6);
INSERT INTO employee(nname, surname, age, salary, adress, emp_role, emp_date, lotid) VALUES ('Cozma', 'Teodora', 24, 2400, 'Str. Traian Nr. 222', 'Evidenta masini', '2009-10-09', 4);

INSERT INTO event_(details) VALUES('Vanzare vehicul.');
INSERT INTO event_(details) VALUES('Inchiriere vehicul.');
INSERT INTO event_(details) VALUES('Reparare vehicul.');
INSERT INTO event_(details) VALUES('Depozitare vehicul.');
INSERT INTO event_(details) VALUES('Parcare vehicul.');
INSERT INTO event_(details) VALUES('Furt.');
INSERT INTO event_(details) VALUES('Adaugare vehciul.');

INSERT INTO location(city, street, nb) VALUES ('Bucuresti', 'Avram Iancu', 24);
INSERT INTO location(city, street, nb) VALUES ('Bucuresti', 'Andrei Muresan', 2);
INSERT INTO location(city, street, nb) VALUES ('Bucuresti', 'Mihai Cipariu', 36);
INSERT INTO location(city, street, nb) VALUES ('Ploiesti', 'Forestiera', 58);

INSERT INTO lot(size, locationid) VALUES (20, 1);
INSERT INTO lot(size, locationid) VALUES (50, 2);
INSERT INTO lot(size, locationid) VALUES (30, 2);
INSERT INTO lot(size, locationid) VALUES (40, 3);
INSERT INTO lot(size, locationid) VALUES (40, 4);
INSERT INTO lot(size, locationid) VALUES (30, 4);

INSERT INTO route(departure, arrival, distance) VALUES ('Bucuresti', 'Cluj', 400);
INSERT INTO route(departure, arrival, distance) VALUES ('Ploiesti', 'Braila', 200);
INSERT INTO route(departure, arrival, distance) VALUES ('Braila', 'Constanta', 300);
INSERT INTO route(departure, arrival, distance) VALUES ('Constanta', 'Sofia', 400);
INSERT INTO route(departure, arrival, distance) VALUES ('Galati', 'Zalau', 500);
INSERT INTO route(departure, arrival, distance) VALUES ('Zalau', 'Budapesta', 200);
INSERT INTO route(departure, arrival, distance) VALUES ('Budapesta', 'Galati', 700);
INSERT INTO route(departure, arrival, distance) VALUES ('Sofia', 'Bucuresti', 300);
INSERT INTO route(departure, arrival, distance) VALUES ('Chisinau', 'Constanta', 600);
INSERT INTO route(departure, arrival, distance) VALUES ('Bucuresti', 'Zalau', 500);

INSERT INTO vehicle_status(ttype, details) VALUES ('Parcat', 'Vehiculul este parcat.');
INSERT INTO vehicle_status(ttype, details) VALUES ('De vanzare', 'Vehiculul este de vanzare.');
INSERT INTO vehicle_status(ttype, details) VALUES ('De inchiriat', 'Vehiculul este de inchiriat.');
INSERT INTO vehicle_status(ttype, details) VALUES ('In reparatii', 'Vehiculul este in reparatii.');
INSERT INTO vehicle_status(ttype, details) VALUES ('Ireparabil', 'Vehiculul nu mai poate fi reparat.');
INSERT INTO vehicle_status(ttype, details) VALUES ('Indisponibil', 'Vehiculul nu este disponibil momentan.');

INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('TM05ABG', 1, 120, 1, 2, 10, '2021-11-29', 20, 2006);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('CJ89ALG', 2, 30, 1, 3, 9, '2021-12-04', 20, 2007);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('BV92SCS', 3, 15, 1, 1, 8, '2021-12-13', 20, 2008);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('IF54HJV', 4, 200, 1, 4, 7, '2021-12-10', 20, 2006);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('VS28KLS', 5, 300, 1, 5, 6, '2021-12-08', 20, 2007);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('SJ11MKP', 6, 240, 1, 6, 5, '2021-11-27', 20, 2007);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('BM43ADK', 7, 360, 1, 6, 4, '2021-10-30', 20, 2007);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('MM72TRO', 8, 25, 1, 2, 3, '2021-11-30', 20, 2006);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('B324OPA', 9, 150, 1, 4, 2, '2021-11-21', 20, 2006);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('B820LDA', 10, 273, 1, 4, 1, '2021-12-03', 20, 2008);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('OL23FDF', 1, 254, 2, 1, NULL, '2021-07-19', 20, 2008);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('CT34HGD', 2, 24, 3, 3, NULL, '2021-12-02', 20, 2008);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('SJ42GHF', 3, 452, 4, 5, NULL, '2021-12-05', 20, 2004);
INSERT INTO vehicle(nb, brandid, km, statusid, lotid, driverid, fuel_date, fuel, out_year) VALUES ('CJ89POI', 4, 542, 5, 2, NULL, '2021-01-02', 20, 2004);

	
DROP PROCEDURE IF EXISTS alimentare_vehicul;
DELIMITER //
CREATE PROCEDURE alimentare_vehicul(numar CHAR(7), data_alimentarii DATE, km INT, sofer INT)
BEGIN 
    SET @max_carb = (SELECT b.fuel_capacity FROM brand b, vehicle v WHERE (v.brandid = b.id AND STRCMP(v.nb, numar) = 0));
    
	INSERT INTO alimentare(nr, fuel, fueling_date, km, driverid) VALUES(numar, @max_carb, data_alimentarii, km, sofer);
    
    UPDATE vehicle 
    SET fuel = @max_carb,
		fuel_date = data_alimentarii,
        vehicle.km = vehicle.km + km,
        driverid = sofer
        WHERE nb = numar;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS consum_mediu;
DELIMITER //
CREATE PROCEDURE consum_mediu(IN sofer INT, OUT consum_mediu DOUBLE)
BEGIN
	SET @consum_total = (SELECT SUM(a.fuel) FROM alimentare a WHERE a.driverid = sofer);
    SET @km_total = (SELECT SUM(a.km) FROM alimentare a WHERE a.driverid = sofer);
    SET consum_mediu = @consum_total / @km_total;
    #SELECT @consum_mediu AS 'Consum mediu';
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS inregistrare_eveniment;
DELIMITER //
CREATE PROCEDURE inregistrare_eveniment(tip INT, ev_date DATE, employee INT, numar CHAR(7))
BEGIN 
	IF (tip = 1) THEN
		IF ((SELECT statusid FROM vehicle WHERE STRCMP(nb, numar) = 0) = 2) THEN
            UPDATE lot SET current_size = current_size - 1 WHERE id = (SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0);
            INSERT INTO lot_event(lotid, eventid, emp_id, ev_date) VALUES ((SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0), tip, employee, ev_date);
            DELETE FROM vehicle WHERE STRCMP(nb, numar) = 0;
		ELSE 
			SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Masina nu este de vanzare.';
		END IF;
	END IF;
    
	IF (tip = 2) THEN
		IF ((SELECT statusid FROM vehicle WHERE STRCMP(nb, numar) = 0) = 3) THEN
			UPDATE vehicle SET statusid = 6 WHERE STRCMP(nb, numar) = 0;
            UPDATE lot SET current_size = current_size - 1 WHERE id = (SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0);
            INSERT INTO lot_event(lotid, eventid, emp_id, ev_date) VALUES ((SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0), tip, employee, ev_date);
		ELSE 
			SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Masina nu este de inchiriat.';
		END IF;
	END IF;
    
	IF (tip = 3) THEN
		UPDATE vehicle SET statusid = 4 WHERE STRCMP(nb, numar) = 0;
        INSERT INTO lot_event VALUES ((SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0), tip, employee, ev_date);
	END IF;
    
	IF (tip = 4) THEN 
		UPDATE vehicle SET statusid = 5 WHERE nb = numar;
        INSERT INTO lot_event VALUES ((SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0), tip, employee, ev_date);
	END IF;
    
	IF (tip = 5) THEN
		UPDATE vehicle SET statusid = 1 WHERE STRCMP(nb, numar) = 0;
        INSERT INTO lot_event(lotid, eventid, emp_id, ev_date) VALUES ((SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0), tip, employee, ev_date);
	END IF;
    
    IF (tip = 6) THEN
        INSERT INTO lot_event(lotid, eventid, emp_id, ev_date) VALUES ((SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0), tip, employee, ev_date);
		UPDATE lot SET current_size = current_size - 1 WHERE id = (SELECT lotid FROM vehicle WHERE STRCMP(nb, numar) = 0);
        DELETE FROM vehicle WHERE STRCMP(nb, numar) = 0;
	END IF;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS inregistrare_ruta;
DELIMITER //
CREATE PROCEDURE inregistrare_ruta(numar CHAR(7), sofer INT, data_sosire DATE)
BEGIN
	SET @ruta = (SELECT routeid FROM driver WHERE sofer = id);
	SET @dist = (SELECT r.distance FROM route r, driver d WHERE r.id = d.routeid AND d.routeid = @ruta);
	CALL alimentare_vehicul(numar, data_sosire, @dist, sofer);
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS raport_vehicule;
DELIMITER //
CREATE PROCEDURE raport_vehicule()
BEGIN
	SELECT v.nb AS 'Numar inmatriculare', v.out_year AS 'Anul fabricatiei', SUM(a.fuel) / SUM(a.km) AS 'Consum mediu'
    FROM vehicle v
    LEFT JOIN alimentare a ON v.nb = a.nr
	GROUP BY v.nb;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS raport_detaliat_vehicule;
DELIMITER //
CREATE PROCEDURE raport_detaliat_vehicule()
BEGIN
	SELECT v.nb AS 'Numar inmatriculare',
			v.out_year AS 'Anul fabricatiei',
			v.fuel_date AS 'Ultima alimentare',
			a.driverid AS 'ID Sofer', 
			SUM(a.fuel) / SUM(a.km) AS 'Consum mediu'
    FROM vehicle v
    LEFT JOIN alimentare a ON v.nb = a.nr
    GROUP BY v.nb
    ORDER BY a.driverid, SUM(a.fuel) / SUM(a.km), v.nb ASC, v.fuel_date DESC;
END//
DELIMITER ;
    
DROP PROCEDURE IF EXISTS all_brand_cars;
DELIMITER //
CREATE PROCEDURE all_brand_cars(brand VARCHAR(20), stat VARCHAR(20))
BEGIN
	SELECT DISTINCT v.nb AS 'Numar inmatriculare',
			brand AS 'Firma producatoare',
            v.lotid AS 'Lotul',
            v.out_year AS 'Anul fabricatiei'
	FROM vehicle v
    RIGHT JOIN brand b ON v.brandid = (SELECT id FROM brand bb WHERE STRCMP(bb.nname, brand) = 0)
    WHERE v.statusid = (SELECT id FROM vehicle_status vs WHERE STRCMP(vs.ttype, stat) = 0);
    
END//
DELIMITER ;
    
DROP PROCEDURE IF EXISTS show_events;
DELIMITER //
CREATE PROCEDURE show_events(employee INT)
BEGIN
	SELECT e.nname AS 'Nume angajat',
			e.surname AS 'Prenume angajat',
            e.emp_role AS 'Post',
            ev.details AS 'Eveniment',
            le.ev_date AS 'Data',
            le.lotid AS 'Lot'
	FROM employee e
    LEFT JOIN lot_event le ON le.emp_id = e.id 
    LEFT JOIN event_ ev ON ev.id = le.eventid
    WHERE e.id = employee;
END//
DELIMITER ;
 
DROP PROCEDURE IF EXISTS marire_salariu;
DELIMITER //
CREATE PROCEDURE marire_salariu(emp INT)
BEGIN 
	IF (DATEDIFF(CURRENT_DATE(), (SELECT emp_date FROM employee WHERE id = emp)) > 730) THEN
		IF ((SELECT COUNT(emp_id) FROM lot_event WHERE emp_id = emp) > 5) THEN
			UPDATE employee SET salary = salary + 100 WHERE id = emp;
		ELSE
			SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Angajatul nu a luat parte la suficiente evenimente.';
		END IF;
	ELSE
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Angajatul nu are vechimea necesara.';
	END IF;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS delete_employees;
DELIMITER //
CREATE PROCEDURE delete_employees()
BEGIN
	DELETE FROM employee WHERE id IN (SELECT le.emp_id
										FROM lot_event le 
										GROUP BY le.emp_id
										HAVING COUNT(le.id) > 3
											);
END//
DELIMITER ;

# INTEROGAREA 1 
SELECT d.nname AS 'Nume',
		d.surname AS 'Prenume',
        d.age AS 'Varsta',
        d.salary AS 'Salariu',
        SUM(a.km) AS 'Kilometri parcursi'
FROM driver d
LEFT JOIN alimentare a ON a.driverid = d.id
GROUP BY d.id
ORDER BY d.age;

#INTEROGAREA 2 
SELECT d.nname AS 'Nume',
		d.surname AS 'Prenume',
        r.departure AS 'Pornire',
        r.arrival AS 'Sosire',
        r.distance AS 'Kilometraj'
FROM driver d
LEFT JOIN route r ON r.id = d.routeid 
GROUP BY r.id
ORDER BY r.distance;

#INTEROGAREA 3 
SELECT b.nname AS 'Nume Producator',
		COUNT(v.id) AS 'Numar de vehicule'
FROM vehicle v
RIGHT JOIN brand b ON v.brandid = b.id
GROUP BY b.id
ORDER BY COUNT(v.id);

#INTEROGAREA 4 
SELECT l.id AS 'ID lot',
		COUNT(v.id) AS 'Dimensiune curenta',
        l.size AS 'Dimensiune maxima',
        ll.city AS 'Oras',
        ll.street AS 'Strada',
        ll.nb AS 'Numarul'
FROM vehicle v
RIGHT JOIN lot l ON v.lotid = l.id
LEFT JOIN location ll ON l.locationid = ll.id
GROUP BY l.id;

# INTEROGAREA 5 
SELECT vs.ttype AS 'Status',
		COUNT(v.id) AS 'Numar de vehicule',
        vs.details AS 'Detalii'
FROM vehicle_status vs 
LEFT JOIN vehicle v ON vs.id = v.statusid
GROUP BY vs.ttype;

# INTEROGAREA 6 
SELECT e.nname AS 'Nume angajat',
		e.surname AS 'Prenume angajat', 
        e.emp_date AS 'Data angajarii',
        DATEDIFF(CURRENT_DATE(), e.emp_date) AS 'Vechime'
FROM employee e
HAVING DATEDIFF(CURRENT_DATE(), e.emp_date) < 1095;

# INTEROGAREA 7 
SELECT e.id AS 'ID angajat', 
		e.nname AS 'Nume angajat',
		e.surname AS 'Prenume angajat',
        COUNT(le.id) AS 'Numar evenimente'
FROM employee e 
LEFT JOIN lot_event le ON le.emp_id = e.id
GROUP BY e.id
ORDER BY COUNT(le.id) DESC;

# INTEROGAREA 8 
SELECT d.id AS 'ID sofer',
		d.nname AS 'Nume sofer',
        d.surname AS 'Prenume sofer',
        COUNT(a.id) AS 'Numar de alimentari'
FROM driver d
LEFT JOIN alimentare a ON a.driverid = d.id
GROUP BY d.id
ORDER BY COUNT(a.id) DESC
LIMIT 3;

#INTEROGAREA 9 
SELECT b.nname AS 'Nume',
		b.fuel_capacity AS 'Capacitate'
FROM brand b
ORDER BY fuel_capacity DESC
LIMIT 1;

# INTEROGAREA 10 
SELECT *
FROM employee
WHERE lotid IN (
		SELECT l.id 
        FROM lot l
        LEFT JOIN vehicle v ON l.id = v.lotid
        GROUP BY l.id
        HAVING COUNT(v.id) > 2)
ORDER BY lotid;

# INTEROGAREA 11 
SELECT d.nname AS 'Nume',
		d.surname AS 'Prenume',
        r.departure AS 'Pornire',
        r.arrival AS 'Sosire',
        r.distance / v.km AS 'Ratio'
FROM driver d
LEFT JOIN route r ON d.routeid = r.id
LEFT JOIN vehicle v ON d.id = v.driverid
ORDER BY r.distance / v.km;

#INTEROGAREA 12 
SELECT *
FROM vehicle v
LEFT JOIN lot l ON v.lotid = l.id
LEFT JOIN location ll ON l.locationid = ll.id
WHERE ll.city = 'Bucuresti'
ORDER BY v.id;
		
#INTEROGAREA 13 
SELECT a.fueling_date AS 'Data',
		AVG( (SELECT b.fuel_capacity 
			FROM brand b 
            LEFT JOIN vehicle v ON v.brandid = b.id 
            WHERE (v.brandid = b.id AND STRCMP(v.nb, a.nr) = 0))) AS 'Media de combustibil'
FROM alimentare a
GROUP BY a.fueling_date
ORDER BY AVG(a.fueling_date);
        
#INTEROGAREA 14 
SELECT ev.details AS 'Eveniment',
		COUNT(le.id) AS 'Numarul de evenimente'
FROM event_ ev
LEFT JOIN lot_event le ON ev.id = le.eventid
GROUP BY ev.id
ORDER BY COUNT(le.id);

#INTEROGAREA 15
SELECT e.emp_role AS 'Post',
		COUNT(e.id) AS 'Numar de angajati'
FROM employee e
GROUP BY e.emp_role;

#INTEROGAREA 16 
SELECT DISTINCT d.nname AS 'Nume sofer',
		d.surname AS 'Prenume sofer',
        d.salary AS 'Salariu sofer',
		e.nname AS 'Nume angajat',
        e.surname AS 'Prenume angajat',
        e.salary AS 'Salariu angajat'
FROM driver d, employee e
WHERE d.salary = e.salary;

#INTEROGAREA 17 
SELECT DISTINCT d.nname AS 'Nume sofer',
		d.surname AS 'Prenume sofer'
FROM employee d, employee dd
WHERE (d.surname = dd.surname AND d.nname != dd.nname) OR (d.nname = dd.nname AND d.surname != dd.surname) OR (d.surname = dd.surname AND d.nname = dd.nname AND d.id != dd.id);

#INTEROGAREA 18
SELECT e.nname AS 'Nume angajat',
		e.surname AS 'Prenume angajat',
        DATEDIFF(CURRENT_DATE(), e.emp_date) / (365 * e.age) AS 'Ratio'
FROM employee e
ORDER BY DATEDIFF(CURRENT_DATE(), e.emp_date) / (365 * e.age) DESC;

#INTEROGAREA 19 
SELECT d.nname AS 'Nume sofer',
		d.surname AS 'Prenume sofer',
        r.distance AS 'Distanta rutei',
        v.km AS 'Kilometrajul masinii'
FROM driver d
LEFT JOIN route r ON d.routeid = r.id
LEFT JOIN vehicle v ON d.id = v.driverid
WHERE r.distance < v.km;

#INTEROGAREA 20 
SELECT b.nname AS 'Firma producatoare',
		COUNT(le.id) AS 'Numar interactiuni'
FROM brand b
LEFT JOIN vehicle v ON b.id = v.brandid
LEFT JOIN lot_event le ON v.lotid = le.lotid
GROUP BY b.nname
ORDER BY COUNT(le.id) DESC
LIMIT 1;


DROP VIEW IF EXISTS vehicule;
CREATE VIEW vehicule(Numar_inmatriculare, Kilometraj, Combustibil, Data_ultimei_alimentari)
AS
SELECT v.nb,
		v.km,
        v.fuel,
        v.fuel_date 
FROM vehicle v
WHERE v.km > 500;

DROP VIEW IF EXISTS angajati;
CREATE VIEW angajati(Nume, Prenume, Varsta, Salariu)
AS
SELECT e.nname, e.surname, e.age, e.salary
FROM employee e
WHERE e.age > 40;

select * 
from alimentari;

DROP VIEW IF EXISTS alimentari;
CREATE VIEW alimentari(Numar_inmatriculare, Data_alimentarii, Kilometri_parcursi, Sofer)
AS
SELECT a.nr, a.fueling_date, a.km, a.driverid
FROM alimentare a
HAVING DATEDIFF(CURRENT_DATE(), a.fueling_date) <= 365;

DROP USER IF EXISTS 'Anonymous'@'localhost';
CREATE USER 'Anonymous'@'localhost';
GRANT SELECT ON `car_park` . * TO 'Anonymous'@'localhost';

DROP USER IF EXISTS 'User'@'localhost';
CREATE USER 'User'@'localhost' IDENTIFIED BY 'password';
GRANT SELECT, INSERT, UPDATE ON  `car_park` . * TO 'User'@'localhost';

DROP USER IF EXISTS 'RRaul'@'localhost';
CREATE USER 'RRaul'@'localhost' IDENTIFIED BY 'parola';
GRANT ALL ON  `car_park` . * TO 'RRaul'@'localhost';